{"ast":null,"code":"/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/** @file httpprovider.js\n * @authors:\n *   Marek Kotewicz <marek@ethdev.com>\n *   Marian Oancea <marian@ethdev.com>\n *   Fabian Vogelsteller <fabian@ethdev.com>\n * @date 2015\n */\nvar errors = require('./errors'); // workaround to use httpprovider in different envs\n// browser\n\n\nif (typeof window !== 'undefined' && window.XMLHttpRequest) {\n  XMLHttpRequest = window.XMLHttpRequest; // jshint ignore: line\n  // node\n} else {\n  XMLHttpRequest = require('xmlhttprequest').XMLHttpRequest; // jshint ignore: line\n}\n\nvar XHR2 = require('xhr2'); // jshint ignore: line\n\n/**\n * HttpProvider should be used to send rpc calls over http\n */\n\n\nvar HttpProvider = function (host, timeout) {\n  this.host = host || 'http://localhost:8545';\n  this.timeout = timeout || 0;\n};\n/**\n * Should be called to prepare new XMLHttpRequest\n *\n * @method prepareRequest\n * @param {Boolean} true if request should be async\n * @return {XMLHttpRequest} object\n */\n\n\nHttpProvider.prototype.prepareRequest = function (async) {\n  var request;\n\n  if (async) {\n    request = new XHR2();\n    request.timeout = this.timeout;\n  } else {\n    request = new XMLHttpRequest();\n  }\n\n  request.open('POST', this.host, async);\n  request.setRequestHeader('Content-Type', 'application/json');\n  return request;\n};\n/**\n * Should be called to make sync request\n *\n * @method send\n * @param {Object} payload\n * @return {Object} result\n */\n\n\nHttpProvider.prototype.send = function (payload) {\n  var request = this.prepareRequest(false);\n\n  try {\n    request.send(JSON.stringify(payload));\n  } catch (error) {\n    throw errors.InvalidConnection(this.host);\n  }\n\n  var result = request.responseText;\n\n  try {\n    result = JSON.parse(result);\n  } catch (e) {\n    throw errors.InvalidResponse(request.responseText);\n  }\n\n  return result;\n};\n/**\n * Should be used to make async request\n *\n * @method sendAsync\n * @param {Object} payload\n * @param {Function} callback triggered on end with (err, result)\n */\n\n\nHttpProvider.prototype.sendAsync = function (payload, callback) {\n  var request = this.prepareRequest(true);\n\n  request.onreadystatechange = function () {\n    if (request.readyState === 4 && request.timeout !== 1) {\n      var result = request.responseText;\n      var error = null;\n\n      try {\n        result = JSON.parse(result);\n      } catch (e) {\n        error = errors.InvalidResponse(request.responseText);\n      }\n\n      callback(error, result);\n    }\n  };\n\n  request.ontimeout = function () {\n    callback(errors.ConnectionTimeout(this.timeout));\n  };\n\n  try {\n    request.send(JSON.stringify(payload));\n  } catch (error) {\n    callback(errors.InvalidConnection(this.host));\n  }\n};\n/**\n * Synchronously tries to make Http request\n *\n * @method isConnected\n * @return {Boolean} returns true if request haven't failed. Otherwise false\n */\n\n\nHttpProvider.prototype.isConnected = function () {\n  try {\n    this.send({\n      id: 9999999999,\n      jsonrpc: '2.0',\n      method: 'net_listening',\n      params: []\n    });\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n\nmodule.exports = HttpProvider;","map":{"version":3,"sources":["/home/fitsh/Code/practice/blockchain/ethStudy/lotteryProject/node_modules/_web3@0.18.4@web3/lib/web3/httpprovider.js"],"names":["errors","require","window","XMLHttpRequest","XHR2","HttpProvider","host","timeout","prototype","prepareRequest","async","request","open","setRequestHeader","send","payload","JSON","stringify","error","InvalidConnection","result","responseText","parse","e","InvalidResponse","sendAsync","callback","onreadystatechange","readyState","ontimeout","ConnectionTimeout","isConnected","id","jsonrpc","method","params","module","exports"],"mappings":"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","sourcesContent":["/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** @file httpprovider.js\n * @authors:\n *   Marek Kotewicz <marek@ethdev.com>\n *   Marian Oancea <marian@ethdev.com>\n *   Fabian Vogelsteller <fabian@ethdev.com>\n * @date 2015\n */\n\n\nvar errors = require('./errors');\n\n// workaround to use httpprovider in different envs\n\n// browser\nif (typeof window !== 'undefined' && window.XMLHttpRequest) {\n    XMLHttpRequest = window.XMLHttpRequest; // jshint ignore: line\n// node\n} else {\n    XMLHttpRequest = require('xmlhttprequest').XMLHttpRequest; // jshint ignore: line\n}\n\nvar XHR2 = require('xhr2'); // jshint ignore: line\n\n/**\n * HttpProvider should be used to send rpc calls over http\n */\nvar HttpProvider = function (host, timeout) {\n    this.host = host || 'http://localhost:8545';\n    this.timeout = timeout || 0;\n};\n\n/**\n * Should be called to prepare new XMLHttpRequest\n *\n * @method prepareRequest\n * @param {Boolean} true if request should be async\n * @return {XMLHttpRequest} object\n */\nHttpProvider.prototype.prepareRequest = function (async) {\n    var request;\n\n    if (async) {\n      request = new XHR2();\n      request.timeout = this.timeout;\n    }else {\n      request = new XMLHttpRequest();\n    }\n\n    request.open('POST', this.host, async);\n    request.setRequestHeader('Content-Type','application/json');\n    return request;\n};\n\n/**\n * Should be called to make sync request\n *\n * @method send\n * @param {Object} payload\n * @return {Object} result\n */\nHttpProvider.prototype.send = function (payload) {\n    var request = this.prepareRequest(false);\n\n    try {\n        request.send(JSON.stringify(payload));\n    } catch(error) {\n        throw errors.InvalidConnection(this.host);\n    }\n\n    var result = request.responseText;\n\n    try {\n        result = JSON.parse(result);\n    } catch(e) {\n        throw errors.InvalidResponse(request.responseText);\n    }\n\n    return result;\n};\n\n/**\n * Should be used to make async request\n *\n * @method sendAsync\n * @param {Object} payload\n * @param {Function} callback triggered on end with (err, result)\n */\nHttpProvider.prototype.sendAsync = function (payload, callback) {\n    var request = this.prepareRequest(true);\n\n    request.onreadystatechange = function() {\n        if (request.readyState === 4 && request.timeout !== 1) {\n            var result = request.responseText;\n            var error = null;\n\n            try {\n                result = JSON.parse(result);\n            } catch(e) {\n                error = errors.InvalidResponse(request.responseText);\n            }\n\n            callback(error, result);\n        }\n    };\n\n    request.ontimeout = function() {\n      callback(errors.ConnectionTimeout(this.timeout));\n    };\n\n    try {\n        request.send(JSON.stringify(payload));\n    } catch(error) {\n        callback(errors.InvalidConnection(this.host));\n    }\n};\n\n/**\n * Synchronously tries to make Http request\n *\n * @method isConnected\n * @return {Boolean} returns true if request haven't failed. Otherwise false\n */\nHttpProvider.prototype.isConnected = function() {\n    try {\n        this.send({\n            id: 9999999999,\n            jsonrpc: '2.0',\n            method: 'net_listening',\n            params: []\n        });\n        return true;\n    } catch(e) {\n        return false;\n    }\n};\n\nmodule.exports = HttpProvider;\n"]},"metadata":{},"sourceType":"script"}