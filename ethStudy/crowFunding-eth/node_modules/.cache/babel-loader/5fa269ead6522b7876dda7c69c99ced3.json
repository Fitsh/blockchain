{"ast":null,"code":"'use strict';\n\nconst inherits = require('util').inherits;\n\nconst HookedWalletEthTxSubprovider = require('./hooked-wallet-ethtx.js');\n\nmodule.exports = WalletSubprovider;\ninherits(WalletSubprovider, HookedWalletEthTxSubprovider);\n\nfunction WalletSubprovider(wallet, opts) {\n  opts.getAccounts = function (cb) {\n    cb(null, [wallet.getAddressString()]);\n  };\n\n  opts.getPrivateKey = function (address, cb) {\n    if (address !== wallet.getAddressString()) {\n      return cb('Account not found');\n    }\n\n    cb(null, wallet.getPrivateKey());\n  };\n\n  WalletSubprovider.super_.call(this, opts);\n}","map":{"version":3,"sources":["/home/fitsh/Code/practice/blockchain/ethStudy/lotteryProject/node_modules/_web3-provider-engine@8.6.1@web3-provider-engine/subproviders/wallet.js"],"names":["inherits","require","HookedWalletEthTxSubprovider","module","exports","WalletSubprovider","wallet","opts","getAccounts","cb","getAddressString","getPrivateKey","address","super_","call"],"mappings":"AAAA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,MAAD,CAAP,CAAgBD,QAAjC;;AACA,MAAME,4BAA4B,GAAGD,OAAO,CAAC,0BAAD,CAA5C;;AAEAE,MAAM,CAACC,OAAP,GAAiBC,iBAAjB;AAEAL,QAAQ,CAACK,iBAAD,EAAoBH,4BAApB,CAAR;;AAEA,SAASG,iBAAT,CAA4BC,MAA5B,EAAoCC,IAApC,EAA0C;AACxCA,EAAAA,IAAI,CAACC,WAAL,GAAmB,UAAUC,EAAV,EAAc;AAC/BA,IAAAA,EAAE,CAAC,IAAD,EAAO,CAAEH,MAAM,CAACI,gBAAP,EAAF,CAAP,CAAF;AACD,GAFD;;AAIAH,EAAAA,IAAI,CAACI,aAAL,GAAqB,UAAUC,OAAV,EAAmBH,EAAnB,EAAuB;AAC1C,QAAIG,OAAO,KAAKN,MAAM,CAACI,gBAAP,EAAhB,EAA2C;AACzC,aAAOD,EAAE,CAAC,mBAAD,CAAT;AACD;;AAEDA,IAAAA,EAAE,CAAC,IAAD,EAAOH,MAAM,CAACK,aAAP,EAAP,CAAF;AACD,GAND;;AAQAN,EAAAA,iBAAiB,CAACQ,MAAlB,CAAyBC,IAAzB,CAA8B,IAA9B,EAAoCP,IAApC;AACD","sourcesContent":["'use strict'\n\nconst inherits = require('util').inherits\nconst HookedWalletEthTxSubprovider = require('./hooked-wallet-ethtx.js')\n\nmodule.exports = WalletSubprovider\n\ninherits(WalletSubprovider, HookedWalletEthTxSubprovider)\n\nfunction WalletSubprovider (wallet, opts) {\n  opts.getAccounts = function (cb) {\n    cb(null, [ wallet.getAddressString() ])\n  }\n\n  opts.getPrivateKey = function (address, cb) {\n    if (address !== wallet.getAddressString()) {\n      return cb('Account not found')\n    }\n\n    cb(null, wallet.getPrivateKey())\n  }\n\n  WalletSubprovider.super_.call(this, opts)\n}\n"]},"metadata":{},"sourceType":"script"}