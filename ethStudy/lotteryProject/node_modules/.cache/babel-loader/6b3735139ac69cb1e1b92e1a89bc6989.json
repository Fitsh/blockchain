{"ast":null,"code":"/*\n * Uses ethereumjs-tx to sign a transaction.\n *\n * The two callbacks a user needs to implement are:\n * - getAccounts() -- array of addresses supported\n * - getPrivateKey(address) -- return private key for a given address\n *\n * Optionally approveTransaction(), approveMessage() can be supplied too.\n */\nconst inherits = require('util').inherits;\n\nconst HookedWalletProvider = require('./hooked-wallet.js');\n\nconst EthTx = require('ethereumjs-tx');\n\nconst ethUtil = require('ethereumjs-util');\n\nmodule.exports = HookedWalletEthTxSubprovider;\ninherits(HookedWalletEthTxSubprovider, HookedWalletProvider);\n\nfunction HookedWalletEthTxSubprovider(opts) {\n  const self = this;\n  HookedWalletEthTxSubprovider.super_.call(self, opts);\n\n  self.signTransaction = function (txData, cb) {\n    // defaults\n    if (txData.gas !== undefined) txData.gasLimit = txData.gas;\n    txData.value = txData.value || '0x00';\n    txData.data = ethUtil.addHexPrefix(txData.data);\n    opts.getPrivateKey(txData.from, function (err, privateKey) {\n      if (err) return cb(err);\n      var tx = new EthTx(txData);\n      tx.sign(privateKey);\n      cb(null, '0x' + tx.serialize().toString('hex'));\n    });\n  };\n\n  self.signMessage = function (msgParams, cb) {\n    opts.getPrivateKey(msgParams.from, function (err, privateKey) {\n      if (err) return cb(err);\n      var msgHash = ethUtil.sha3(msgParams.data);\n      var sig = ethUtil.ecsign(msgHash, privateKey);\n      var serialized = ethUtil.bufferToHex(concatSig(sig.v, sig.r, sig.s));\n      cb(null, serialized);\n    });\n  };\n}\n\nfunction concatSig(v, r, s) {\n  r = ethUtil.fromSigned(r);\n  s = ethUtil.fromSigned(s);\n  v = ethUtil.bufferToInt(v);\n  r = ethUtil.toUnsigned(r).toString('hex');\n  s = ethUtil.toUnsigned(s).toString('hex');\n  v = ethUtil.stripHexPrefix(ethUtil.intToHex(v));\n  return ethUtil.addHexPrefix(r.concat(s, v).toString(\"hex\"));\n}","map":{"version":3,"sources":["/home/fitsh/Code/practice/blockchain/ethStudy/lotteryProject/node_modules/_web3-provider-engine@8.6.1@web3-provider-engine/subproviders/hooked-wallet-ethtx.js"],"names":["inherits","require","HookedWalletProvider","EthTx","ethUtil","module","exports","HookedWalletEthTxSubprovider","opts","self","super_","call","signTransaction","txData","cb","gas","undefined","gasLimit","value","data","addHexPrefix","getPrivateKey","from","err","privateKey","tx","sign","serialize","toString","signMessage","msgParams","msgHash","sha3","sig","ecsign","serialized","bufferToHex","concatSig","v","r","s","fromSigned","bufferToInt","toUnsigned","stripHexPrefix","intToHex","concat"],"mappings":"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","sourcesContent":["/*\n * Uses ethereumjs-tx to sign a transaction.\n *\n * The two callbacks a user needs to implement are:\n * - getAccounts() -- array of addresses supported\n * - getPrivateKey(address) -- return private key for a given address\n *\n * Optionally approveTransaction(), approveMessage() can be supplied too.\n */\n\nconst inherits = require('util').inherits\nconst HookedWalletProvider = require('./hooked-wallet.js')\nconst EthTx = require('ethereumjs-tx')\nconst ethUtil = require('ethereumjs-util')\n\nmodule.exports = HookedWalletEthTxSubprovider\n\ninherits(HookedWalletEthTxSubprovider, HookedWalletProvider)\n\nfunction HookedWalletEthTxSubprovider(opts) {\n  const self = this\n  \n  HookedWalletEthTxSubprovider.super_.call(self, opts)\n\n  self.signTransaction = function(txData, cb) {\n    // defaults\n    if (txData.gas !== undefined) txData.gasLimit = txData.gas\n    txData.value = txData.value || '0x00'\n    txData.data = ethUtil.addHexPrefix(txData.data)\n\n    opts.getPrivateKey(txData.from, function(err, privateKey) {\n      if (err) return cb(err)\n\n      var tx = new EthTx(txData)\n      tx.sign(privateKey)\n      cb(null, '0x' + tx.serialize().toString('hex'))\n    })\n  }\n\n  self.signMessage = function(msgParams, cb) {\n    opts.getPrivateKey(msgParams.from, function(err, privateKey) {\n      if (err) return cb(err)\n      var msgHash = ethUtil.sha3(msgParams.data)\n      var sig = ethUtil.ecsign(msgHash, privateKey)\n      var serialized = ethUtil.bufferToHex(concatSig(sig.v, sig.r, sig.s))\n      cb(null, serialized)\n    })\n  }\n\n}\n\nfunction concatSig(v, r, s) {\n  r = ethUtil.fromSigned(r)\n  s = ethUtil.fromSigned(s)\n  v = ethUtil.bufferToInt(v)\n  r = ethUtil.toUnsigned(r).toString('hex')\n  s = ethUtil.toUnsigned(s).toString('hex')\n  v = ethUtil.stripHexPrefix(ethUtil.intToHex(v))\n  return ethUtil.addHexPrefix(r.concat(s, v).toString(\"hex\"))\n}"]},"metadata":{},"sourceType":"script"}