{"ast":null,"code":"/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/**\n * @file utils.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\n/**\n * Utils\n *\n * @module utils\n */\n\n/**\n * Utility functions\n *\n * @class [utils] utils\n * @constructor\n */\nvar BigNumber = require('bignumber.js');\n\nvar sha3 = require('./sha3.js');\n\nvar utf8 = require('utf8');\n\nvar unitMap = {\n  'noether': '0',\n  'wei': '1',\n  'kwei': '1000',\n  'Kwei': '1000',\n  'babbage': '1000',\n  'femtoether': '1000',\n  'mwei': '1000000',\n  'Mwei': '1000000',\n  'lovelace': '1000000',\n  'picoether': '1000000',\n  'gwei': '1000000000',\n  'Gwei': '1000000000',\n  'shannon': '1000000000',\n  'nanoether': '1000000000',\n  'nano': '1000000000',\n  'szabo': '1000000000000',\n  'microether': '1000000000000',\n  'micro': '1000000000000',\n  'finney': '1000000000000000',\n  'milliether': '1000000000000000',\n  'milli': '1000000000000000',\n  'ether': '1000000000000000000',\n  'kether': '1000000000000000000000',\n  'grand': '1000000000000000000000',\n  'mether': '1000000000000000000000000',\n  'gether': '1000000000000000000000000000',\n  'tether': '1000000000000000000000000000000'\n};\n/**\n * Should be called to pad string to expected length\n *\n * @method padLeft\n * @param {String} string to be padded\n * @param {Number} characters that result string should have\n * @param {String} sign, by default 0\n * @returns {String} right aligned string\n */\n\nvar padLeft = function (string, chars, sign) {\n  return new Array(chars - string.length + 1).join(sign ? sign : \"0\") + string;\n};\n/**\n * Should be called to pad string to expected length\n *\n * @method padRight\n * @param {String} string to be padded\n * @param {Number} characters that result string should have\n * @param {String} sign, by default 0\n * @returns {String} right aligned string\n */\n\n\nvar padRight = function (string, chars, sign) {\n  return string + new Array(chars - string.length + 1).join(sign ? sign : \"0\");\n};\n/**\n * Should be called to get utf8 from it's hex representation\n *\n * @method toUtf8\n * @param {String} string in hex\n * @returns {String} ascii string representation of hex value\n */\n\n\nvar toUtf8 = function (hex) {\n  // Find termination\n  var str = \"\";\n  var i = 0,\n      l = hex.length;\n\n  if (hex.substring(0, 2) === '0x') {\n    i = 2;\n  }\n\n  for (; i < l; i += 2) {\n    var code = parseInt(hex.substr(i, 2), 16);\n    if (code === 0) break;\n    str += String.fromCharCode(code);\n  }\n\n  return utf8.decode(str);\n};\n/**\n * Should be called to get ascii from it's hex representation\n *\n * @method toAscii\n * @param {String} string in hex\n * @returns {String} ascii string representation of hex value\n */\n\n\nvar toAscii = function (hex) {\n  // Find termination\n  var str = \"\";\n  var i = 0,\n      l = hex.length;\n\n  if (hex.substring(0, 2) === '0x') {\n    i = 2;\n  }\n\n  for (; i < l; i += 2) {\n    var code = parseInt(hex.substr(i, 2), 16);\n    str += String.fromCharCode(code);\n  }\n\n  return str;\n};\n/**\n * Should be called to get hex representation (prefixed by 0x) of utf8 string\n *\n * @method fromUtf8\n * @param {String} string\n * @param {Number} optional padding\n * @returns {String} hex representation of input string\n */\n\n\nvar fromUtf8 = function (str) {\n  str = utf8.encode(str);\n  var hex = \"\";\n\n  for (var i = 0; i < str.length; i++) {\n    var code = str.charCodeAt(i);\n    if (code === 0) break;\n    var n = code.toString(16);\n    hex += n.length < 2 ? '0' + n : n;\n  }\n\n  return \"0x\" + hex;\n};\n/**\n * Should be called to get hex representation (prefixed by 0x) of ascii string\n *\n * @method fromAscii\n * @param {String} string\n * @param {Number} optional padding\n * @returns {String} hex representation of input string\n */\n\n\nvar fromAscii = function (str) {\n  var hex = \"\";\n\n  for (var i = 0; i < str.length; i++) {\n    var code = str.charCodeAt(i);\n    var n = code.toString(16);\n    hex += n.length < 2 ? '0' + n : n;\n  }\n\n  return \"0x\" + hex;\n};\n/**\n * Should be used to create full function/event name from json abi\n *\n * @method transformToFullName\n * @param {Object} json-abi\n * @return {String} full fnction/event name\n */\n\n\nvar transformToFullName = function (json) {\n  if (json.name.indexOf('(') !== -1) {\n    return json.name;\n  }\n\n  var typeName = json.inputs.map(function (i) {\n    return i.type;\n  }).join();\n  return json.name + '(' + typeName + ')';\n};\n/**\n * Should be called to get display name of contract function\n *\n * @method extractDisplayName\n * @param {String} name of function/event\n * @returns {String} display name for function/event eg. multiply(uint256) -> multiply\n */\n\n\nvar extractDisplayName = function (name) {\n  var length = name.indexOf('(');\n  return length !== -1 ? name.substr(0, length) : name;\n}; /// @returns overloaded part of function/event name\n\n\nvar extractTypeName = function (name) {\n  /// TODO: make it invulnerable\n  var length = name.indexOf('(');\n  return length !== -1 ? name.substr(length + 1, name.length - 1 - (length + 1)).replace(' ', '') : \"\";\n};\n/**\n * Converts value to it's decimal representation in string\n *\n * @method toDecimal\n * @param {String|Number|BigNumber}\n * @return {String}\n */\n\n\nvar toDecimal = function (value) {\n  return toBigNumber(value).toNumber();\n};\n/**\n * Converts value to it's hex representation\n *\n * @method fromDecimal\n * @param {String|Number|BigNumber}\n * @return {String}\n */\n\n\nvar fromDecimal = function (value) {\n  var number = toBigNumber(value);\n  var result = number.toString(16);\n  return number.lessThan(0) ? '-0x' + result.substr(1) : '0x' + result;\n};\n/**\n * Auto converts any given value into it's hex representation.\n *\n * And even stringifys objects before.\n *\n * @method toHex\n * @param {String|Number|BigNumber|Object}\n * @return {String}\n */\n\n\nvar toHex = function (val) {\n  /*jshint maxcomplexity: 8 */\n  if (isBoolean(val)) return fromDecimal(+val);\n  if (isBigNumber(val)) return fromDecimal(val);\n  if (isObject(val)) return fromUtf8(JSON.stringify(val)); // if its a negative number, pass it through fromDecimal\n\n  if (isString(val)) {\n    if (val.indexOf('-0x') === 0) return fromDecimal(val);else if (val.indexOf('0x') === 0) return val;else if (!isFinite(val)) return fromAscii(val);\n  }\n\n  return fromDecimal(val);\n};\n/**\n * Returns value of unit in Wei\n *\n * @method getValueOfUnit\n * @param {String} unit the unit to convert to, default ether\n * @returns {BigNumber} value of the unit (in Wei)\n * @throws error if the unit is not correct:w\n */\n\n\nvar getValueOfUnit = function (unit) {\n  unit = unit ? unit.toLowerCase() : 'ether';\n  var unitValue = unitMap[unit];\n\n  if (unitValue === undefined) {\n    throw new Error('This unit doesn\\'t exists, please use the one of the following units' + JSON.stringify(unitMap, null, 2));\n  }\n\n  return new BigNumber(unitValue, 10);\n};\n/**\n * Takes a number of wei and converts it to any other ether unit.\n *\n * Possible units are:\n *   SI Short   SI Full        Effigy       Other\n * - kwei       femtoether     babbage\n * - mwei       picoether      lovelace\n * - gwei       nanoether      shannon      nano\n * - --         microether     szabo        micro\n * - --         milliether     finney       milli\n * - ether      --             --\n * - kether                    --           grand\n * - mether\n * - gether\n * - tether\n *\n * @method fromWei\n * @param {Number|String} number can be a number, number string or a HEX of a decimal\n * @param {String} unit the unit to convert to, default ether\n * @return {String|Object} When given a BigNumber object it returns one as well, otherwise a number\n*/\n\n\nvar fromWei = function (number, unit) {\n  var returnValue = toBigNumber(number).dividedBy(getValueOfUnit(unit));\n  return isBigNumber(number) ? returnValue : returnValue.toString(10);\n};\n/**\n * Takes a number of a unit and converts it to wei.\n *\n * Possible units are:\n *   SI Short   SI Full        Effigy       Other\n * - kwei       femtoether     babbage\n * - mwei       picoether      lovelace\n * - gwei       nanoether      shannon      nano\n * - --         microether     szabo        micro\n * - --         microether     szabo        micro\n * - --         milliether     finney       milli\n * - ether      --             --\n * - kether                    --           grand\n * - mether\n * - gether\n * - tether\n *\n * @method toWei\n * @param {Number|String|BigNumber} number can be a number, number string or a HEX of a decimal\n * @param {String} unit the unit to convert from, default ether\n * @return {String|Object} When given a BigNumber object it returns one as well, otherwise a number\n*/\n\n\nvar toWei = function (number, unit) {\n  var returnValue = toBigNumber(number).times(getValueOfUnit(unit));\n  return isBigNumber(number) ? returnValue : returnValue.toString(10);\n};\n/**\n * Takes an input and transforms it into an bignumber\n *\n * @method toBigNumber\n * @param {Number|String|BigNumber} a number, string, HEX string or BigNumber\n * @return {BigNumber} BigNumber\n*/\n\n\nvar toBigNumber = function (number) {\n  /*jshint maxcomplexity:5 */\n  number = number || 0;\n  if (isBigNumber(number)) return number;\n\n  if (isString(number) && (number.indexOf('0x') === 0 || number.indexOf('-0x') === 0)) {\n    return new BigNumber(number.replace('0x', ''), 16);\n  }\n\n  return new BigNumber(number.toString(10), 10);\n};\n/**\n * Takes and input transforms it into bignumber and if it is negative value, into two's complement\n *\n * @method toTwosComplement\n * @param {Number|String|BigNumber}\n * @return {BigNumber}\n */\n\n\nvar toTwosComplement = function (number) {\n  var bigNumber = toBigNumber(number).round();\n\n  if (bigNumber.lessThan(0)) {\n    return new BigNumber(\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", 16).plus(bigNumber).plus(1);\n  }\n\n  return bigNumber;\n};\n/**\n * Checks if the given string is strictly an address\n *\n * @method isStrictAddress\n * @param {String} address the given HEX adress\n * @return {Boolean}\n*/\n\n\nvar isStrictAddress = function (address) {\n  return /^0x[0-9a-f]{40}$/i.test(address);\n};\n/**\n * Checks if the given string is an address\n *\n * @method isAddress\n * @param {String} address the given HEX adress\n * @return {Boolean}\n*/\n\n\nvar isAddress = function (address) {\n  if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {\n    // check if it has the basic requirements of an address\n    return false;\n  } else if (/^(0x)?[0-9a-f]{40}$/.test(address) || /^(0x)?[0-9A-F]{40}$/.test(address)) {\n    // If it's all small caps or all all caps, return true\n    return true;\n  } else {\n    // Otherwise check each case\n    return isChecksumAddress(address);\n  }\n};\n/**\n * Checks if the given string is a checksummed address\n *\n * @method isChecksumAddress\n * @param {String} address the given HEX adress\n * @return {Boolean}\n*/\n\n\nvar isChecksumAddress = function (address) {\n  // Check each case\n  address = address.replace('0x', '');\n  var addressHash = sha3(address.toLowerCase());\n\n  for (var i = 0; i < 40; i++) {\n    // the nth letter should be uppercase if the nth digit of casemap is 1\n    if (parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i] || parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n/**\n * Makes a checksum address\n *\n * @method toChecksumAddress\n * @param {String} address the given HEX adress\n * @return {String}\n*/\n\n\nvar toChecksumAddress = function (address) {\n  if (typeof address === 'undefined') return '';\n  address = address.toLowerCase().replace('0x', '');\n  var addressHash = sha3(address);\n  var checksumAddress = '0x';\n\n  for (var i = 0; i < address.length; i++) {\n    // If ith character is 9 to f then make it uppercase \n    if (parseInt(addressHash[i], 16) > 7) {\n      checksumAddress += address[i].toUpperCase();\n    } else {\n      checksumAddress += address[i];\n    }\n  }\n\n  return checksumAddress;\n};\n/**\n * Transforms given string to valid 20 bytes-length addres with 0x prefix\n *\n * @method toAddress\n * @param {String} address\n * @return {String} formatted address\n */\n\n\nvar toAddress = function (address) {\n  if (isStrictAddress(address)) {\n    return address;\n  }\n\n  if (/^[0-9a-f]{40}$/.test(address)) {\n    return '0x' + address;\n  }\n\n  return '0x' + padLeft(toHex(address).substr(2), 40);\n};\n/**\n * Returns true if object is BigNumber, otherwise false\n *\n * @method isBigNumber\n * @param {Object}\n * @return {Boolean}\n */\n\n\nvar isBigNumber = function (object) {\n  return object instanceof BigNumber || object && object.constructor && object.constructor.name === 'BigNumber';\n};\n/**\n * Returns true if object is string, otherwise false\n *\n * @method isString\n * @param {Object}\n * @return {Boolean}\n */\n\n\nvar isString = function (object) {\n  return typeof object === 'string' || object && object.constructor && object.constructor.name === 'String';\n};\n/**\n * Returns true if object is function, otherwise false\n *\n * @method isFunction\n * @param {Object}\n * @return {Boolean}\n */\n\n\nvar isFunction = function (object) {\n  return typeof object === 'function';\n};\n/**\n * Returns true if object is Objet, otherwise false\n *\n * @method isObject\n * @param {Object}\n * @return {Boolean}\n */\n\n\nvar isObject = function (object) {\n  return typeof object === 'object';\n};\n/**\n * Returns true if object is boolean, otherwise false\n *\n * @method isBoolean\n * @param {Object}\n * @return {Boolean}\n */\n\n\nvar isBoolean = function (object) {\n  return typeof object === 'boolean';\n};\n/**\n * Returns true if object is array, otherwise false\n *\n * @method isArray\n * @param {Object}\n * @return {Boolean}\n */\n\n\nvar isArray = function (object) {\n  return object instanceof Array;\n};\n/**\n * Returns true if given string is valid json object\n *\n * @method isJson\n * @param {String}\n * @return {Boolean}\n */\n\n\nvar isJson = function (str) {\n  try {\n    return !!JSON.parse(str);\n  } catch (e) {\n    return false;\n  }\n};\n/**\n * Returns true if given string is a valid Ethereum block header bloom.\n *\n * @method isBloom\n * @param {String} hex encoded bloom filter\n * @return {Boolean}\n */\n\n\nvar isBloom = function (bloom) {\n  if (!/^(0x)?[0-9a-f]{512}$/i.test(bloom)) {\n    return false;\n  } else if (/^(0x)?[0-9a-f]{512}$/.test(bloom) || /^(0x)?[0-9A-F]{512}$/.test(bloom)) {\n    return true;\n  }\n\n  return false;\n};\n/**\n * Returns true if given string is a valid log topic.\n *\n * @method isTopic\n * @param {String} hex encoded topic\n * @return {Boolean}\n */\n\n\nvar isTopic = function (topic) {\n  if (!/^(0x)?[0-9a-f]{64}$/i.test(topic)) {\n    return false;\n  } else if (/^(0x)?[0-9a-f]{64}$/.test(topic) || /^(0x)?[0-9A-F]{64}$/.test(topic)) {\n    return true;\n  }\n\n  return false;\n};\n\nmodule.exports = {\n  padLeft: padLeft,\n  padRight: padRight,\n  toHex: toHex,\n  toDecimal: toDecimal,\n  fromDecimal: fromDecimal,\n  toUtf8: toUtf8,\n  toAscii: toAscii,\n  fromUtf8: fromUtf8,\n  fromAscii: fromAscii,\n  transformToFullName: transformToFullName,\n  extractDisplayName: extractDisplayName,\n  extractTypeName: extractTypeName,\n  toWei: toWei,\n  fromWei: fromWei,\n  toBigNumber: toBigNumber,\n  toTwosComplement: toTwosComplement,\n  toAddress: toAddress,\n  isBigNumber: isBigNumber,\n  isStrictAddress: isStrictAddress,\n  isAddress: isAddress,\n  isChecksumAddress: isChecksumAddress,\n  toChecksumAddress: toChecksumAddress,\n  isFunction: isFunction,\n  isString: isString,\n  isObject: isObject,\n  isBoolean: isBoolean,\n  isArray: isArray,\n  isJson: isJson,\n  isBloom: isBloom,\n  isTopic: isTopic\n};","map":{"version":3,"sources":["/home/fitsh/Code/practice/blockchain/ethStudy/lotteryProject/node_modules/_web3@0.18.4@web3/lib/utils/utils.js"],"names":["BigNumber","require","sha3","utf8","unitMap","padLeft","string","chars","sign","Array","length","join","padRight","toUtf8","hex","str","i","l","substring","code","parseInt","substr","String","fromCharCode","decode","toAscii","fromUtf8","encode","charCodeAt","n","toString","fromAscii","transformToFullName","json","name","indexOf","typeName","inputs","map","type","extractDisplayName","extractTypeName","replace","toDecimal","value","toBigNumber","toNumber","fromDecimal","number","result","lessThan","toHex","val","isBoolean","isBigNumber","isObject","JSON","stringify","isString","isFinite","getValueOfUnit","unit","toLowerCase","unitValue","undefined","Error","fromWei","returnValue","dividedBy","toWei","times","toTwosComplement","bigNumber","round","plus","isStrictAddress","address","test","isAddress","isChecksumAddress","addressHash","toUpperCase","toChecksumAddress","checksumAddress","toAddress","object","constructor","isFunction","isArray","isJson","parse","e","isBloom","bloom","isTopic","topic","module","exports"],"mappings":"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","sourcesContent":["/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file utils.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\n/**\n * Utils\n *\n * @module utils\n */\n\n/**\n * Utility functions\n *\n * @class [utils] utils\n * @constructor\n */\n\n\nvar BigNumber = require('bignumber.js');\nvar sha3 = require('./sha3.js');\nvar utf8 = require('utf8');\n\nvar unitMap = {\n    'noether':      '0',    \n    'wei':          '1',\n    'kwei':         '1000',\n    'Kwei':         '1000',\n    'babbage':      '1000',\n    'femtoether':   '1000',\n    'mwei':         '1000000',\n    'Mwei':         '1000000',\n    'lovelace':     '1000000',\n    'picoether':    '1000000',\n    'gwei':         '1000000000',\n    'Gwei':         '1000000000',\n    'shannon':      '1000000000',\n    'nanoether':    '1000000000',\n    'nano':         '1000000000',\n    'szabo':        '1000000000000',\n    'microether':   '1000000000000',\n    'micro':        '1000000000000',\n    'finney':       '1000000000000000',\n    'milliether':    '1000000000000000',\n    'milli':         '1000000000000000',\n    'ether':        '1000000000000000000',\n    'kether':       '1000000000000000000000',\n    'grand':        '1000000000000000000000',\n    'mether':       '1000000000000000000000000',\n    'gether':       '1000000000000000000000000000',\n    'tether':       '1000000000000000000000000000000'\n};\n\n/**\n * Should be called to pad string to expected length\n *\n * @method padLeft\n * @param {String} string to be padded\n * @param {Number} characters that result string should have\n * @param {String} sign, by default 0\n * @returns {String} right aligned string\n */\nvar padLeft = function (string, chars, sign) {\n    return new Array(chars - string.length + 1).join(sign ? sign : \"0\") + string;\n};\n\n/**\n * Should be called to pad string to expected length\n *\n * @method padRight\n * @param {String} string to be padded\n * @param {Number} characters that result string should have\n * @param {String} sign, by default 0\n * @returns {String} right aligned string\n */\nvar padRight = function (string, chars, sign) {\n    return string + (new Array(chars - string.length + 1).join(sign ? sign : \"0\"));\n};\n\n/**\n * Should be called to get utf8 from it's hex representation\n *\n * @method toUtf8\n * @param {String} string in hex\n * @returns {String} ascii string representation of hex value\n */\nvar toUtf8 = function(hex) {\n// Find termination\n    var str = \"\";\n    var i = 0, l = hex.length;\n    if (hex.substring(0, 2) === '0x') {\n        i = 2;\n    }\n    for (; i < l; i+=2) {\n        var code = parseInt(hex.substr(i, 2), 16);\n        if (code === 0)\n            break;\n        str += String.fromCharCode(code);\n    }\n\n    return utf8.decode(str);\n};\n\n/**\n * Should be called to get ascii from it's hex representation\n *\n * @method toAscii\n * @param {String} string in hex\n * @returns {String} ascii string representation of hex value\n */\nvar toAscii = function(hex) {\n// Find termination\n    var str = \"\";\n    var i = 0, l = hex.length;\n    if (hex.substring(0, 2) === '0x') {\n        i = 2;\n    }\n    for (; i < l; i+=2) {\n        var code = parseInt(hex.substr(i, 2), 16);\n        str += String.fromCharCode(code);\n    }\n\n    return str;\n};\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of utf8 string\n *\n * @method fromUtf8\n * @param {String} string\n * @param {Number} optional padding\n * @returns {String} hex representation of input string\n */\nvar fromUtf8 = function(str) {\n    str = utf8.encode(str);\n    var hex = \"\";\n    for(var i = 0; i < str.length; i++) {\n        var code = str.charCodeAt(i);\n        if (code === 0)\n            break;\n        var n = code.toString(16);\n        hex += n.length < 2 ? '0' + n : n;\n    }\n\n    return \"0x\" + hex;\n};\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of ascii string\n *\n * @method fromAscii\n * @param {String} string\n * @param {Number} optional padding\n * @returns {String} hex representation of input string\n */\nvar fromAscii = function(str) {\n    var hex = \"\";\n    for(var i = 0; i < str.length; i++) {\n        var code = str.charCodeAt(i);\n        var n = code.toString(16);\n        hex += n.length < 2 ? '0' + n : n;\n    }\n\n    return \"0x\" + hex;\n};\n\n/**\n * Should be used to create full function/event name from json abi\n *\n * @method transformToFullName\n * @param {Object} json-abi\n * @return {String} full fnction/event name\n */\nvar transformToFullName = function (json) {\n    if (json.name.indexOf('(') !== -1) {\n        return json.name;\n    }\n\n    var typeName = json.inputs.map(function(i){return i.type; }).join();\n    return json.name + '(' + typeName + ')';\n};\n\n/**\n * Should be called to get display name of contract function\n *\n * @method extractDisplayName\n * @param {String} name of function/event\n * @returns {String} display name for function/event eg. multiply(uint256) -> multiply\n */\nvar extractDisplayName = function (name) {\n    var length = name.indexOf('(');\n    return length !== -1 ? name.substr(0, length) : name;\n};\n\n/// @returns overloaded part of function/event name\nvar extractTypeName = function (name) {\n    /// TODO: make it invulnerable\n    var length = name.indexOf('(');\n    return length !== -1 ? name.substr(length + 1, name.length - 1 - (length + 1)).replace(' ', '') : \"\";\n};\n\n/**\n * Converts value to it's decimal representation in string\n *\n * @method toDecimal\n * @param {String|Number|BigNumber}\n * @return {String}\n */\nvar toDecimal = function (value) {\n    return toBigNumber(value).toNumber();\n};\n\n/**\n * Converts value to it's hex representation\n *\n * @method fromDecimal\n * @param {String|Number|BigNumber}\n * @return {String}\n */\nvar fromDecimal = function (value) {\n    var number = toBigNumber(value);\n    var result = number.toString(16);\n\n    return number.lessThan(0) ? '-0x' + result.substr(1) : '0x' + result;\n};\n\n/**\n * Auto converts any given value into it's hex representation.\n *\n * And even stringifys objects before.\n *\n * @method toHex\n * @param {String|Number|BigNumber|Object}\n * @return {String}\n */\nvar toHex = function (val) {\n    /*jshint maxcomplexity: 8 */\n\n    if (isBoolean(val))\n        return fromDecimal(+val);\n\n    if (isBigNumber(val))\n        return fromDecimal(val);\n\n    if (isObject(val))\n        return fromUtf8(JSON.stringify(val));\n\n    // if its a negative number, pass it through fromDecimal\n    if (isString(val)) {\n        if (val.indexOf('-0x') === 0)\n            return fromDecimal(val);\n        else if(val.indexOf('0x') === 0)\n            return val;\n        else if (!isFinite(val))\n            return fromAscii(val);\n    }\n\n    return fromDecimal(val);\n};\n\n/**\n * Returns value of unit in Wei\n *\n * @method getValueOfUnit\n * @param {String} unit the unit to convert to, default ether\n * @returns {BigNumber} value of the unit (in Wei)\n * @throws error if the unit is not correct:w\n */\nvar getValueOfUnit = function (unit) {\n    unit = unit ? unit.toLowerCase() : 'ether';\n    var unitValue = unitMap[unit];\n    if (unitValue === undefined) {\n        throw new Error('This unit doesn\\'t exists, please use the one of the following units' + JSON.stringify(unitMap, null, 2));\n    }\n    return new BigNumber(unitValue, 10);\n};\n\n/**\n * Takes a number of wei and converts it to any other ether unit.\n *\n * Possible units are:\n *   SI Short   SI Full        Effigy       Other\n * - kwei       femtoether     babbage\n * - mwei       picoether      lovelace\n * - gwei       nanoether      shannon      nano\n * - --         microether     szabo        micro\n * - --         milliether     finney       milli\n * - ether      --             --\n * - kether                    --           grand\n * - mether\n * - gether\n * - tether\n *\n * @method fromWei\n * @param {Number|String} number can be a number, number string or a HEX of a decimal\n * @param {String} unit the unit to convert to, default ether\n * @return {String|Object} When given a BigNumber object it returns one as well, otherwise a number\n*/\nvar fromWei = function(number, unit) {\n    var returnValue = toBigNumber(number).dividedBy(getValueOfUnit(unit));\n\n    return isBigNumber(number) ? returnValue : returnValue.toString(10);\n};\n\n/**\n * Takes a number of a unit and converts it to wei.\n *\n * Possible units are:\n *   SI Short   SI Full        Effigy       Other\n * - kwei       femtoether     babbage\n * - mwei       picoether      lovelace\n * - gwei       nanoether      shannon      nano\n * - --         microether     szabo        micro\n * - --         microether     szabo        micro\n * - --         milliether     finney       milli\n * - ether      --             --\n * - kether                    --           grand\n * - mether\n * - gether\n * - tether\n *\n * @method toWei\n * @param {Number|String|BigNumber} number can be a number, number string or a HEX of a decimal\n * @param {String} unit the unit to convert from, default ether\n * @return {String|Object} When given a BigNumber object it returns one as well, otherwise a number\n*/\nvar toWei = function(number, unit) {\n    var returnValue = toBigNumber(number).times(getValueOfUnit(unit));\n\n    return isBigNumber(number) ? returnValue : returnValue.toString(10);\n};\n\n/**\n * Takes an input and transforms it into an bignumber\n *\n * @method toBigNumber\n * @param {Number|String|BigNumber} a number, string, HEX string or BigNumber\n * @return {BigNumber} BigNumber\n*/\nvar toBigNumber = function(number) {\n    /*jshint maxcomplexity:5 */\n    number = number || 0;\n    if (isBigNumber(number))\n        return number;\n\n    if (isString(number) && (number.indexOf('0x') === 0 || number.indexOf('-0x') === 0)) {\n        return new BigNumber(number.replace('0x',''), 16);\n    }\n\n    return new BigNumber(number.toString(10), 10);\n};\n\n/**\n * Takes and input transforms it into bignumber and if it is negative value, into two's complement\n *\n * @method toTwosComplement\n * @param {Number|String|BigNumber}\n * @return {BigNumber}\n */\nvar toTwosComplement = function (number) {\n    var bigNumber = toBigNumber(number).round();\n    if (bigNumber.lessThan(0)) {\n        return new BigNumber(\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", 16).plus(bigNumber).plus(1);\n    }\n    return bigNumber;\n};\n\n/**\n * Checks if the given string is strictly an address\n *\n * @method isStrictAddress\n * @param {String} address the given HEX adress\n * @return {Boolean}\n*/\nvar isStrictAddress = function (address) {\n    return /^0x[0-9a-f]{40}$/i.test(address);\n};\n\n/**\n * Checks if the given string is an address\n *\n * @method isAddress\n * @param {String} address the given HEX adress\n * @return {Boolean}\n*/\nvar isAddress = function (address) {\n    if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {\n        // check if it has the basic requirements of an address\n        return false;\n    } else if (/^(0x)?[0-9a-f]{40}$/.test(address) || /^(0x)?[0-9A-F]{40}$/.test(address)) {\n        // If it's all small caps or all all caps, return true\n        return true;\n    } else {\n        // Otherwise check each case\n        return isChecksumAddress(address);\n    }\n};\n\n/**\n * Checks if the given string is a checksummed address\n *\n * @method isChecksumAddress\n * @param {String} address the given HEX adress\n * @return {Boolean}\n*/\nvar isChecksumAddress = function (address) {    \n    // Check each case\n    address = address.replace('0x','');\n    var addressHash = sha3(address.toLowerCase());\n\n    for (var i = 0; i < 40; i++ ) { \n        // the nth letter should be uppercase if the nth digit of casemap is 1\n        if ((parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i]) || (parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i])) {\n            return false;\n        }\n    }\n    return true;    \n};\n\n\n\n/**\n * Makes a checksum address\n *\n * @method toChecksumAddress\n * @param {String} address the given HEX adress\n * @return {String}\n*/\nvar toChecksumAddress = function (address) { \n    if (typeof address === 'undefined') return '';\n\n    address = address.toLowerCase().replace('0x','');\n    var addressHash = sha3(address);\n    var checksumAddress = '0x';\n\n    for (var i = 0; i < address.length; i++ ) { \n        // If ith character is 9 to f then make it uppercase \n        if (parseInt(addressHash[i], 16) > 7) {\n          checksumAddress += address[i].toUpperCase();\n        } else {\n            checksumAddress += address[i];\n        }\n    }\n    return checksumAddress;\n};\n\n/**\n * Transforms given string to valid 20 bytes-length addres with 0x prefix\n *\n * @method toAddress\n * @param {String} address\n * @return {String} formatted address\n */\nvar toAddress = function (address) {\n    if (isStrictAddress(address)) {\n        return address;\n    }\n\n    if (/^[0-9a-f]{40}$/.test(address)) {\n        return '0x' + address;\n    }\n\n    return '0x' + padLeft(toHex(address).substr(2), 40);\n};\n\n/**\n * Returns true if object is BigNumber, otherwise false\n *\n * @method isBigNumber\n * @param {Object}\n * @return {Boolean}\n */\nvar isBigNumber = function (object) {\n    return object instanceof BigNumber ||\n        (object && object.constructor && object.constructor.name === 'BigNumber');\n};\n\n/**\n * Returns true if object is string, otherwise false\n *\n * @method isString\n * @param {Object}\n * @return {Boolean}\n */\nvar isString = function (object) {\n    return typeof object === 'string' ||\n        (object && object.constructor && object.constructor.name === 'String');\n};\n\n/**\n * Returns true if object is function, otherwise false\n *\n * @method isFunction\n * @param {Object}\n * @return {Boolean}\n */\nvar isFunction = function (object) {\n    return typeof object === 'function';\n};\n\n/**\n * Returns true if object is Objet, otherwise false\n *\n * @method isObject\n * @param {Object}\n * @return {Boolean}\n */\nvar isObject = function (object) {\n    return typeof object === 'object';\n};\n\n/**\n * Returns true if object is boolean, otherwise false\n *\n * @method isBoolean\n * @param {Object}\n * @return {Boolean}\n */\nvar isBoolean = function (object) {\n    return typeof object === 'boolean';\n};\n\n/**\n * Returns true if object is array, otherwise false\n *\n * @method isArray\n * @param {Object}\n * @return {Boolean}\n */\nvar isArray = function (object) {\n    return object instanceof Array;\n};\n\n/**\n * Returns true if given string is valid json object\n *\n * @method isJson\n * @param {String}\n * @return {Boolean}\n */\nvar isJson = function (str) {\n    try {\n        return !!JSON.parse(str);\n    } catch (e) {\n        return false;\n    }\n};\n\n/**\n * Returns true if given string is a valid Ethereum block header bloom.\n *\n * @method isBloom\n * @param {String} hex encoded bloom filter\n * @return {Boolean}\n */\nvar isBloom = function (bloom) {\n    if (!/^(0x)?[0-9a-f]{512}$/i.test(bloom)) {\n        return false;\n    } else if (/^(0x)?[0-9a-f]{512}$/.test(bloom) || /^(0x)?[0-9A-F]{512}$/.test(bloom)) {\n        return true;\n    } \n    return false;\n};\n\n/**\n * Returns true if given string is a valid log topic.\n *\n * @method isTopic\n * @param {String} hex encoded topic\n * @return {Boolean}\n */\nvar isTopic = function (topic) {\n    if (!/^(0x)?[0-9a-f]{64}$/i.test(topic)) {\n        return false;\n    } else if (/^(0x)?[0-9a-f]{64}$/.test(topic) || /^(0x)?[0-9A-F]{64}$/.test(topic)) {\n        return true;\n    } \n    return false;\n};\n\nmodule.exports = {\n    padLeft: padLeft,\n    padRight: padRight,\n    toHex: toHex,\n    toDecimal: toDecimal,\n    fromDecimal: fromDecimal,\n    toUtf8: toUtf8,\n    toAscii: toAscii,\n    fromUtf8: fromUtf8,\n    fromAscii: fromAscii,\n    transformToFullName: transformToFullName,\n    extractDisplayName: extractDisplayName,\n    extractTypeName: extractTypeName,\n    toWei: toWei,\n    fromWei: fromWei,\n    toBigNumber: toBigNumber,\n    toTwosComplement: toTwosComplement,\n    toAddress: toAddress,\n    isBigNumber: isBigNumber,\n    isStrictAddress: isStrictAddress,\n    isAddress: isAddress,\n    isChecksumAddress: isChecksumAddress,\n    toChecksumAddress: toChecksumAddress,\n    isFunction: isFunction,\n    isString: isString,\n    isObject: isObject,\n    isBoolean: isBoolean,\n    isArray: isArray,\n    isJson: isJson,\n    isBloom: isBloom,\n    isTopic: isTopic,\n};\n"]},"metadata":{},"sourceType":"script"}