{"ast":null,"code":"/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/**\n * @file function.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\nvar coder = require('../solidity/coder');\n\nvar utils = require('../utils/utils');\n\nvar formatters = require('./formatters');\n\nvar sha3 = require('../utils/sha3');\n/**\n * This prototype should be used to call/sendTransaction to solidity functions\n */\n\n\nvar SolidityFunction = function (eth, json, address) {\n  this._eth = eth;\n  this._inputTypes = json.inputs.map(function (i) {\n    return i.type;\n  });\n  this._outputTypes = json.outputs.map(function (i) {\n    return i.type;\n  });\n  this._constant = json.constant;\n  this._payable = json.payable;\n  this._name = utils.transformToFullName(json);\n  this._address = address;\n};\n\nSolidityFunction.prototype.extractCallback = function (args) {\n  if (utils.isFunction(args[args.length - 1])) {\n    return args.pop(); // modify the args array!\n  }\n};\n\nSolidityFunction.prototype.extractDefaultBlock = function (args) {\n  if (args.length > this._inputTypes.length && !utils.isObject(args[args.length - 1])) {\n    return formatters.inputDefaultBlockNumberFormatter(args.pop()); // modify the args array!\n  }\n};\n/**\n * Should be used to create payload from arguments\n *\n * @method toPayload\n * @param {Array} solidity function params\n * @param {Object} optional payload options\n */\n\n\nSolidityFunction.prototype.toPayload = function (args) {\n  var options = {};\n\n  if (args.length > this._inputTypes.length && utils.isObject(args[args.length - 1])) {\n    options = args[args.length - 1];\n  }\n\n  options.to = this._address;\n  options.data = '0x' + this.signature() + coder.encodeParams(this._inputTypes, args);\n  return options;\n};\n/**\n * Should be used to get function signature\n *\n * @method signature\n * @return {String} function signature\n */\n\n\nSolidityFunction.prototype.signature = function () {\n  return sha3(this._name).slice(0, 8);\n};\n\nSolidityFunction.prototype.unpackOutput = function (output) {\n  if (!output) {\n    return;\n  }\n\n  output = output.length >= 2 ? output.slice(2) : output;\n  var result = coder.decodeParams(this._outputTypes, output);\n  return result.length === 1 ? result[0] : result;\n};\n/**\n * Calls a contract function.\n *\n * @method call\n * @param {...Object} Contract function arguments\n * @param {function} If the last argument is a function, the contract function\n *   call will be asynchronous, and the callback will be passed the\n *   error and result.\n * @return {String} output bytes\n */\n\n\nSolidityFunction.prototype.call = function () {\n  var args = Array.prototype.slice.call(arguments).filter(function (a) {\n    return a !== undefined;\n  });\n  var callback = this.extractCallback(args);\n  var defaultBlock = this.extractDefaultBlock(args);\n  var payload = this.toPayload(args);\n\n  if (!callback) {\n    var output = this._eth.call(payload, defaultBlock);\n\n    return this.unpackOutput(output);\n  }\n\n  var self = this;\n\n  this._eth.call(payload, defaultBlock, function (error, output) {\n    if (error) return callback(error, null);\n    var unpacked = null;\n\n    try {\n      unpacked = self.unpackOutput(output);\n    } catch (e) {\n      error = e;\n    }\n\n    callback(error, unpacked);\n  });\n};\n/**\n * Should be used to sendTransaction to solidity function\n *\n * @method sendTransaction\n */\n\n\nSolidityFunction.prototype.sendTransaction = function () {\n  var args = Array.prototype.slice.call(arguments).filter(function (a) {\n    return a !== undefined;\n  });\n  var callback = this.extractCallback(args);\n  var payload = this.toPayload(args);\n\n  if (payload.value > 0 && !this._payable) {\n    throw new Error('Cannot send value to non-payable function');\n  }\n\n  if (!callback) {\n    return this._eth.sendTransaction(payload);\n  }\n\n  this._eth.sendTransaction(payload, callback);\n};\n/**\n * Should be used to estimateGas of solidity function\n *\n * @method estimateGas\n */\n\n\nSolidityFunction.prototype.estimateGas = function () {\n  var args = Array.prototype.slice.call(arguments);\n  var callback = this.extractCallback(args);\n  var payload = this.toPayload(args);\n\n  if (!callback) {\n    return this._eth.estimateGas(payload);\n  }\n\n  this._eth.estimateGas(payload, callback);\n};\n/**\n * Return the encoded data of the call\n *\n * @method getData\n * @return {String} the encoded data\n */\n\n\nSolidityFunction.prototype.getData = function () {\n  var args = Array.prototype.slice.call(arguments);\n  var payload = this.toPayload(args);\n  return payload.data;\n};\n/**\n * Should be used to get function display name\n *\n * @method displayName\n * @return {String} display name of the function\n */\n\n\nSolidityFunction.prototype.displayName = function () {\n  return utils.extractDisplayName(this._name);\n};\n/**\n * Should be used to get function type name\n *\n * @method typeName\n * @return {String} type name of the function\n */\n\n\nSolidityFunction.prototype.typeName = function () {\n  return utils.extractTypeName(this._name);\n};\n/**\n * Should be called to get rpc requests from solidity function\n *\n * @method request\n * @returns {Object}\n */\n\n\nSolidityFunction.prototype.request = function () {\n  var args = Array.prototype.slice.call(arguments);\n  var callback = this.extractCallback(args);\n  var payload = this.toPayload(args);\n  var format = this.unpackOutput.bind(this);\n  return {\n    method: this._constant ? 'eth_call' : 'eth_sendTransaction',\n    callback: callback,\n    params: [payload],\n    format: format\n  };\n};\n/**\n * Should be called to execute function\n *\n * @method execute\n */\n\n\nSolidityFunction.prototype.execute = function () {\n  var transaction = !this._constant; // send transaction\n\n  if (transaction) {\n    return this.sendTransaction.apply(this, Array.prototype.slice.call(arguments));\n  } // call\n\n\n  return this.call.apply(this, Array.prototype.slice.call(arguments));\n};\n/**\n * Should be called to attach function to contract\n *\n * @method attachToContract\n * @param {Contract}\n */\n\n\nSolidityFunction.prototype.attachToContract = function (contract) {\n  var execute = this.execute.bind(this);\n  execute.request = this.request.bind(this);\n  execute.call = this.call.bind(this);\n  execute.sendTransaction = this.sendTransaction.bind(this);\n  execute.estimateGas = this.estimateGas.bind(this);\n  execute.getData = this.getData.bind(this);\n  var displayName = this.displayName();\n\n  if (!contract[displayName]) {\n    contract[displayName] = execute;\n  }\n\n  contract[displayName][this.typeName()] = execute; // circular!!!!\n};\n\nmodule.exports = SolidityFunction;","map":{"version":3,"sources":["/home/fitsh/Code/practice/blockchain/ethStudy/lotteryProject/node_modules/_web3@0.18.4@web3/lib/web3/function.js"],"names":["coder","require","utils","formatters","sha3","SolidityFunction","eth","json","address","_eth","_inputTypes","inputs","map","i","type","_outputTypes","outputs","_constant","constant","_payable","payable","_name","transformToFullName","_address","prototype","extractCallback","args","isFunction","length","pop","extractDefaultBlock","isObject","inputDefaultBlockNumberFormatter","toPayload","options","to","data","signature","encodeParams","slice","unpackOutput","output","result","decodeParams","call","Array","arguments","filter","a","undefined","callback","defaultBlock","payload","self","error","unpacked","e","sendTransaction","value","Error","estimateGas","getData","displayName","extractDisplayName","typeName","extractTypeName","request","format","bind","method","params","execute","transaction","apply","attachToContract","contract","module","exports"],"mappings":"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","sourcesContent":["/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file function.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\nvar coder = require('../solidity/coder');\nvar utils = require('../utils/utils');\nvar formatters = require('./formatters');\nvar sha3 = require('../utils/sha3');\n\n/**\n * This prototype should be used to call/sendTransaction to solidity functions\n */\nvar SolidityFunction = function (eth, json, address) {\n    this._eth = eth;\n    this._inputTypes = json.inputs.map(function (i) {\n        return i.type;\n    });\n    this._outputTypes = json.outputs.map(function (i) {\n        return i.type;\n    });\n    this._constant = json.constant;\n    this._payable = json.payable;\n    this._name = utils.transformToFullName(json);\n    this._address = address;\n};\n\nSolidityFunction.prototype.extractCallback = function (args) {\n    if (utils.isFunction(args[args.length - 1])) {\n        return args.pop(); // modify the args array!\n    }\n};\n\nSolidityFunction.prototype.extractDefaultBlock = function (args) {\n    if (args.length > this._inputTypes.length && !utils.isObject(args[args.length -1])) {\n        return formatters.inputDefaultBlockNumberFormatter(args.pop()); // modify the args array!\n    }\n};\n\n/**\n * Should be used to create payload from arguments\n *\n * @method toPayload\n * @param {Array} solidity function params\n * @param {Object} optional payload options\n */\nSolidityFunction.prototype.toPayload = function (args) {\n    var options = {};\n    if (args.length > this._inputTypes.length && utils.isObject(args[args.length -1])) {\n        options = args[args.length - 1];\n    }\n    options.to = this._address;\n    options.data = '0x' + this.signature() + coder.encodeParams(this._inputTypes, args);\n    return options;\n};\n\n/**\n * Should be used to get function signature\n *\n * @method signature\n * @return {String} function signature\n */\nSolidityFunction.prototype.signature = function () {\n    return sha3(this._name).slice(0, 8);\n};\n\n\nSolidityFunction.prototype.unpackOutput = function (output) {\n    if (!output) {\n        return;\n    }\n\n    output = output.length >= 2 ? output.slice(2) : output;\n    var result = coder.decodeParams(this._outputTypes, output);\n    return result.length === 1 ? result[0] : result;\n};\n\n/**\n * Calls a contract function.\n *\n * @method call\n * @param {...Object} Contract function arguments\n * @param {function} If the last argument is a function, the contract function\n *   call will be asynchronous, and the callback will be passed the\n *   error and result.\n * @return {String} output bytes\n */\nSolidityFunction.prototype.call = function () {\n    var args = Array.prototype.slice.call(arguments).filter(function (a) {return a !== undefined; });\n    var callback = this.extractCallback(args);\n    var defaultBlock = this.extractDefaultBlock(args);\n    var payload = this.toPayload(args);\n\n\n    if (!callback) {\n        var output = this._eth.call(payload, defaultBlock);\n        return this.unpackOutput(output);\n    }\n\n    var self = this;\n    this._eth.call(payload, defaultBlock, function (error, output) {\n        if (error) return callback(error, null);\n\n        var unpacked = null;\n        try {\n            unpacked = self.unpackOutput(output);\n        }\n        catch (e) {\n            error = e;\n        }\n\n        callback(error, unpacked);\n    });\n};\n\n/**\n * Should be used to sendTransaction to solidity function\n *\n * @method sendTransaction\n */\nSolidityFunction.prototype.sendTransaction = function () {\n    var args = Array.prototype.slice.call(arguments).filter(function (a) {return a !== undefined; });\n    var callback = this.extractCallback(args);\n    var payload = this.toPayload(args);\n\n    if (payload.value > 0 && !this._payable) {\n        throw new Error('Cannot send value to non-payable function');\n    }\n\n    if (!callback) {\n        return this._eth.sendTransaction(payload);\n    }\n\n    this._eth.sendTransaction(payload, callback);\n};\n\n/**\n * Should be used to estimateGas of solidity function\n *\n * @method estimateGas\n */\nSolidityFunction.prototype.estimateGas = function () {\n    var args = Array.prototype.slice.call(arguments);\n    var callback = this.extractCallback(args);\n    var payload = this.toPayload(args);\n\n    if (!callback) {\n        return this._eth.estimateGas(payload);\n    }\n\n    this._eth.estimateGas(payload, callback);\n};\n\n/**\n * Return the encoded data of the call\n *\n * @method getData\n * @return {String} the encoded data\n */\nSolidityFunction.prototype.getData = function () {\n    var args = Array.prototype.slice.call(arguments);\n    var payload = this.toPayload(args);\n\n    return payload.data;\n};\n\n/**\n * Should be used to get function display name\n *\n * @method displayName\n * @return {String} display name of the function\n */\nSolidityFunction.prototype.displayName = function () {\n    return utils.extractDisplayName(this._name);\n};\n\n/**\n * Should be used to get function type name\n *\n * @method typeName\n * @return {String} type name of the function\n */\nSolidityFunction.prototype.typeName = function () {\n    return utils.extractTypeName(this._name);\n};\n\n/**\n * Should be called to get rpc requests from solidity function\n *\n * @method request\n * @returns {Object}\n */\nSolidityFunction.prototype.request = function () {\n    var args = Array.prototype.slice.call(arguments);\n    var callback = this.extractCallback(args);\n    var payload = this.toPayload(args);\n    var format = this.unpackOutput.bind(this);\n\n    return {\n        method: this._constant ? 'eth_call' : 'eth_sendTransaction',\n        callback: callback,\n        params: [payload],\n        format: format\n    };\n};\n\n/**\n * Should be called to execute function\n *\n * @method execute\n */\nSolidityFunction.prototype.execute = function () {\n    var transaction = !this._constant;\n\n    // send transaction\n    if (transaction) {\n        return this.sendTransaction.apply(this, Array.prototype.slice.call(arguments));\n    }\n\n    // call\n    return this.call.apply(this, Array.prototype.slice.call(arguments));\n};\n\n/**\n * Should be called to attach function to contract\n *\n * @method attachToContract\n * @param {Contract}\n */\nSolidityFunction.prototype.attachToContract = function (contract) {\n    var execute = this.execute.bind(this);\n    execute.request = this.request.bind(this);\n    execute.call = this.call.bind(this);\n    execute.sendTransaction = this.sendTransaction.bind(this);\n    execute.estimateGas = this.estimateGas.bind(this);\n    execute.getData = this.getData.bind(this);\n    var displayName = this.displayName();\n    if (!contract[displayName]) {\n        contract[displayName] = execute;\n    }\n    contract[displayName][this.typeName()] = execute; // circular!!!!\n};\n\nmodule.exports = SolidityFunction;\n\n"]},"metadata":{},"sourceType":"script"}