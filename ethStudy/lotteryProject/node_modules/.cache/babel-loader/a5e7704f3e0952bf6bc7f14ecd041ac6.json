{"ast":null,"code":"/*\n * Emulate 'eth_accounts' / 'eth_sendTransaction' using 'eth_sendRawTransaction'\n *\n * The two callbacks a user needs to implement are:\n * - getAccounts() -- array of addresses supported\n * - signTransaction(tx) -- sign a raw transaction object\n */\nconst async = require('async');\n\nconst inherits = require('util').inherits;\n\nconst extend = require('xtend');\n\nconst Semaphore = require('semaphore');\n\nconst Subprovider = require('./subprovider.js');\n\nconst estimateGas = require('../util/estimate-gas.js');\n\nmodule.exports = HookedWalletSubprovider; // handles the following RPC methods:\n//   eth_coinbase\n//   eth_accounts\n//   eth_sendTransaction\n//   eth_sign\n//\n// Tx Signature Flow\n//\n// handleRequest: eth_sendTransaction\n//   validateTransaction (basic validity check)\n//     validateSender (checks that sender is in accounts)\n//   processTransaction (sign tx and submit to network)\n//     approveTransaction (UI approval hook)\n//     checkApproval\n//     finalizeAndSubmitTx (tx signing)\n//       nonceLock.take (bottle neck to ensure atomic nonce)\n//         fillInTxExtras (set fallback gasPrice, nonce, etc)\n//         signTransaction (perform the signature)\n//         publishTransaction (publish signed tx to network)\n//\n\ninherits(HookedWalletSubprovider, Subprovider);\n\nfunction HookedWalletSubprovider(opts) {\n  const self = this; // control flow\n\n  self.nonceLock = Semaphore(1); // data lookup\n\n  if (!opts.getAccounts) throw new Error('ProviderEngine - HookedWalletSubprovider - did not provide \"getAccounts\" fn in constructor options');\n  self.getAccounts = opts.getAccounts; // high level override\n\n  if (opts.processTransaction) self.processTransaction = opts.processTransaction;\n  if (opts.processMessage) self.processMessage = opts.processMessage; // approval hooks\n\n  if (opts.approveTransaction) self.approveTransaction = opts.approveTransaction;\n  if (opts.approveMessage) self.approveMessage = opts.approveMessage; // actually perform the signature\n\n  if (opts.signTransaction) self.signTransaction = opts.signTransaction;\n  if (opts.signMessage) self.signMessage = opts.signMessage; // publish to network\n\n  if (opts.publishTransaction) self.publishTransaction = opts.publishTransaction;\n}\n\nHookedWalletSubprovider.prototype.handleRequest = function (payload, next, end) {\n  const self = this;\n\n  switch (payload.method) {\n    case 'eth_coinbase':\n      self.getAccounts(function (err, accounts) {\n        if (err) return end(err);\n        var result = accounts[0] || null;\n        end(null, result);\n      });\n      return;\n\n    case 'eth_accounts':\n      self.getAccounts(function (err, accounts) {\n        if (err) return end(err);\n        end(null, accounts);\n      });\n      return;\n\n    case 'eth_sendTransaction':\n      var txParams = payload.params[0];\n      async.waterfall([cb => self.validateTransaction(txParams, cb), cb => self.processTransaction(txParams, cb)], end);\n      return;\n\n    case 'eth_sign':\n      var address = payload.params[0];\n      var message = payload.params[1]; // non-standard \"extraParams\" to be appended to our \"msgParams\" obj\n      // good place for metadata\n\n      var extraParams = payload.params[2] || {};\n      var msgParams = extend(extraParams, {\n        from: address,\n        data: message\n      });\n      async.waterfall([cb => self.validateMessage(msgParams, cb), cb => self.processMessage(msgParams, cb)], end);\n      return;\n\n    default:\n      next();\n      return;\n  }\n};\n\nHookedWalletSubprovider.prototype.processTransaction = function (txParams, cb) {\n  const self = this;\n  async.waterfall([cb => self.approveTransaction(txParams, cb), (didApprove, cb) => self.checkApproval('transaction', didApprove, cb), cb => self.finalizeAndSubmitTx(txParams, cb)], cb);\n};\n\nHookedWalletSubprovider.prototype.processMessage = function (msgParams, cb) {\n  const self = this;\n  async.waterfall([cb => self.approveMessage(msgParams, cb), (didApprove, cb) => self.checkApproval('message', didApprove, cb), cb => self.signMessage(msgParams, cb)], cb);\n};\n\nHookedWalletSubprovider.prototype.checkApproval = function (type, didApprove, cb) {\n  cb(didApprove ? null : new Error('User denied ' + type + ' signature.'));\n};\n\nHookedWalletSubprovider.prototype.finalizeAndSubmitTx = function (txParams, cb) {\n  const self = this; // can only allow one tx to pass through this flow at a time\n  // so we can atomically consume a nonce\n\n  self.nonceLock.take(function () {\n    async.waterfall([self.fillInTxExtras.bind(self, txParams), self.signTransaction.bind(self), self.publishTransaction.bind(self)], function (err, txHash) {\n      self.nonceLock.leave();\n      if (err) return cb(err);\n      cb(null, txHash);\n    });\n  });\n};\n\nHookedWalletSubprovider.prototype.signTransaction = function (tx, cb) {\n  cb(new Error('ProviderEngine - HookedWalletSubprovider - Must provide \"signTransaction\" fn in constructor options'));\n};\n\nHookedWalletSubprovider.prototype.signMessage = function (msg, cb) {\n  cb(new Error('ProviderEngine - HookedWalletSubprovider - Must provide \"signMessage\" fn in constructor options'));\n};\n\nHookedWalletSubprovider.prototype.approveTransaction = function (txParams, cb) {\n  cb(null, true);\n};\n\nHookedWalletSubprovider.prototype.approveMessage = function (txParams, cb) {\n  cb(null, true);\n};\n\nHookedWalletSubprovider.prototype.publishTransaction = function (rawTx, cb) {\n  const self = this;\n  self.emitPayload({\n    method: 'eth_sendRawTransaction',\n    params: [rawTx]\n  }, function (err, res) {\n    if (err) return cb(err);\n    cb(null, res.result);\n  });\n};\n\nHookedWalletSubprovider.prototype.validateTransaction = function (txParams, cb) {\n  const self = this; // shortcut: undefined sender is invalid\n\n  if (txParams.from === undefined) return cb(new Error(`Undefined address - from address required to sign transaction.`));\n  self.validateSender(txParams.from, function (err, senderIsValid) {\n    if (err) return cb(err);\n    if (!senderIsValid) return cb(new Error(`Unknown address - unable to sign transaction for this address: \"${txParams.from}\"`));\n    cb();\n  });\n};\n\nHookedWalletSubprovider.prototype.validateMessage = function (msgParams, cb) {\n  const self = this;\n  if (msgParams.from === undefined) return cb(new Error(`Undefined address - from address required to sign message.`));\n  self.validateSender(msgParams.from, function (err, senderIsValid) {\n    if (err) return cb(err);\n    if (!senderIsValid) return cb(new Error(`Unknown address - unable to sign message for this address: \"${msgParams.from}\"`));\n    cb();\n  });\n};\n\nHookedWalletSubprovider.prototype.validateSender = function (senderAddress, cb) {\n  const self = this; // shortcut: undefined sender is invalid\n\n  if (senderAddress === undefined) return cb(null, false);\n  self.getAccounts(function (err, accounts) {\n    if (err) return cb(err);\n    var senderIsValid = accounts.map(toLowerCase).indexOf(senderAddress.toLowerCase()) !== -1;\n    cb(null, senderIsValid);\n  });\n};\n\nHookedWalletSubprovider.prototype.fillInTxExtras = function (txParams, cb) {\n  const self = this;\n  var address = txParams.from; // console.log('fillInTxExtras - address:', address)\n\n  var reqs = {};\n\n  if (txParams.gasPrice === undefined) {\n    // console.log(\"need to get gasprice\")\n    reqs.gasPrice = self.emitPayload.bind(self, {\n      method: 'eth_gasPrice',\n      params: []\n    });\n  }\n\n  if (txParams.nonce === undefined) {\n    // console.log(\"need to get nonce\")\n    reqs.nonce = self.emitPayload.bind(self, {\n      method: 'eth_getTransactionCount',\n      params: [address, 'pending']\n    });\n  }\n\n  if (txParams.gas === undefined) {\n    // console.log(\"need to get gas\")\n    reqs.gas = estimateGas.bind(null, self.engine, cloneTxParams(txParams));\n  }\n\n  async.parallel(reqs, function (err, result) {\n    if (err) return cb(err); // console.log('fillInTxExtras - result:', result)\n\n    var res = {};\n    if (result.gasPrice) res.gasPrice = result.gasPrice.result;\n    if (result.nonce) res.nonce = result.nonce.result;\n    if (result.gas) res.gas = result.gas;\n    cb(null, extend(res, txParams));\n  });\n}; // util\n// we use this to clean any custom params from the txParams\n\n\nfunction cloneTxParams(txParams) {\n  return {\n    from: txParams.from,\n    to: txParams.to,\n    value: txParams.value,\n    data: txParams.data,\n    gas: txParams.gas,\n    gasPrice: txParams.gasPrice,\n    nonce: txParams.nonce\n  };\n}\n\nfunction toLowerCase(string) {\n  return string.toLowerCase();\n}","map":{"version":3,"sources":["/home/fitsh/Code/practice/blockchain/ethStudy/lotteryProject/node_modules/_web3-provider-engine@8.6.1@web3-provider-engine/subproviders/hooked-wallet.js"],"names":["async","require","inherits","extend","Semaphore","Subprovider","estimateGas","module","exports","HookedWalletSubprovider","opts","self","nonceLock","getAccounts","Error","processTransaction","processMessage","approveTransaction","approveMessage","signTransaction","signMessage","publishTransaction","prototype","handleRequest","payload","next","end","method","err","accounts","result","txParams","params","waterfall","cb","validateTransaction","address","message","extraParams","msgParams","from","data","validateMessage","didApprove","checkApproval","finalizeAndSubmitTx","type","take","fillInTxExtras","bind","txHash","leave","tx","msg","rawTx","emitPayload","res","undefined","validateSender","senderIsValid","senderAddress","map","toLowerCase","indexOf","reqs","gasPrice","nonce","gas","engine","cloneTxParams","parallel","to","value","string"],"mappings":"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","sourcesContent":["/*\n * Emulate 'eth_accounts' / 'eth_sendTransaction' using 'eth_sendRawTransaction'\n *\n * The two callbacks a user needs to implement are:\n * - getAccounts() -- array of addresses supported\n * - signTransaction(tx) -- sign a raw transaction object\n */\n\nconst async = require('async')\nconst inherits = require('util').inherits\nconst extend = require('xtend')\nconst Semaphore = require('semaphore')\nconst Subprovider = require('./subprovider.js')\nconst estimateGas = require('../util/estimate-gas.js')\n\nmodule.exports = HookedWalletSubprovider\n\n// handles the following RPC methods:\n//   eth_coinbase\n//   eth_accounts\n//   eth_sendTransaction\n//   eth_sign\n\n//\n// Tx Signature Flow\n//\n// handleRequest: eth_sendTransaction\n//   validateTransaction (basic validity check)\n//     validateSender (checks that sender is in accounts)\n//   processTransaction (sign tx and submit to network)\n//     approveTransaction (UI approval hook)\n//     checkApproval\n//     finalizeAndSubmitTx (tx signing)\n//       nonceLock.take (bottle neck to ensure atomic nonce)\n//         fillInTxExtras (set fallback gasPrice, nonce, etc)\n//         signTransaction (perform the signature)\n//         publishTransaction (publish signed tx to network)\n//\n\n\ninherits(HookedWalletSubprovider, Subprovider)\n\nfunction HookedWalletSubprovider(opts){\n  const self = this\n  // control flow\n  self.nonceLock = Semaphore(1)\n\n  // data lookup\n  if (!opts.getAccounts) throw new Error('ProviderEngine - HookedWalletSubprovider - did not provide \"getAccounts\" fn in constructor options')\n  self.getAccounts = opts.getAccounts\n  // high level override\n  if (opts.processTransaction) self.processTransaction = opts.processTransaction\n  if (opts.processMessage) self.processMessage = opts.processMessage\n  // approval hooks\n  if (opts.approveTransaction) self.approveTransaction = opts.approveTransaction\n  if (opts.approveMessage) self.approveMessage = opts.approveMessage\n  // actually perform the signature\n  if (opts.signTransaction) self.signTransaction = opts.signTransaction\n  if (opts.signMessage) self.signMessage = opts.signMessage\n  // publish to network\n  if (opts.publishTransaction) self.publishTransaction = opts.publishTransaction\n}\n\nHookedWalletSubprovider.prototype.handleRequest = function(payload, next, end){\n  const self = this\n\n  switch(payload.method) {\n\n    case 'eth_coinbase':\n      self.getAccounts(function(err, accounts){\n        if (err) return end(err)\n        var result = accounts[0] || null\n        end(null, result)\n      })\n      return\n\n    case 'eth_accounts':\n      self.getAccounts(function(err, accounts){\n        if (err) return end(err)\n        end(null, accounts)\n      })\n      return\n\n    case 'eth_sendTransaction':\n      var txParams = payload.params[0]\n      async.waterfall([\n        (cb) => self.validateTransaction(txParams, cb),\n        (cb) => self.processTransaction(txParams, cb),\n      ], end)\n      return\n\n    case 'eth_sign':\n      var address = payload.params[0]\n      var message = payload.params[1]\n      // non-standard \"extraParams\" to be appended to our \"msgParams\" obj\n      // good place for metadata\n      var extraParams = payload.params[2] || {}\n      var msgParams = extend(extraParams, {\n        from: address,\n        data: message,\n      })\n      async.waterfall([\n        (cb) => self.validateMessage(msgParams, cb),\n        (cb) => self.processMessage(msgParams, cb),\n      ], end)\n      return\n\n    default:\n      next()\n      return\n\n  }\n}\n\nHookedWalletSubprovider.prototype.processTransaction = function(txParams, cb) {\n  const self = this\n  async.waterfall([\n    (cb) => self.approveTransaction(txParams, cb),\n    (didApprove, cb) => self.checkApproval('transaction', didApprove, cb),\n    (cb) => self.finalizeAndSubmitTx(txParams, cb),\n  ], cb)\n}\n\nHookedWalletSubprovider.prototype.processMessage = function(msgParams, cb) {\n  const self = this\n  async.waterfall([\n    (cb) => self.approveMessage(msgParams, cb),\n    (didApprove, cb) => self.checkApproval('message', didApprove, cb),\n    (cb) => self.signMessage(msgParams, cb),\n  ], cb)\n}\n\nHookedWalletSubprovider.prototype.checkApproval = function(type, didApprove, cb) {\n  cb( didApprove ? null : new Error('User denied '+type+' signature.') )\n}\n\nHookedWalletSubprovider.prototype.finalizeAndSubmitTx = function(txParams, cb) {\n  const self = this\n  // can only allow one tx to pass through this flow at a time\n  // so we can atomically consume a nonce\n  self.nonceLock.take(function(){\n    async.waterfall([\n      self.fillInTxExtras.bind(self, txParams),\n      self.signTransaction.bind(self),\n      self.publishTransaction.bind(self),\n    ], function(err, txHash){\n      self.nonceLock.leave()\n      if (err) return cb(err)\n      cb(null, txHash)\n    })\n  })\n}\n\nHookedWalletSubprovider.prototype.signTransaction = function(tx, cb) {\n  cb(new Error('ProviderEngine - HookedWalletSubprovider - Must provide \"signTransaction\" fn in constructor options'))\n}\nHookedWalletSubprovider.prototype.signMessage = function(msg, cb) {\n  cb(new Error('ProviderEngine - HookedWalletSubprovider - Must provide \"signMessage\" fn in constructor options'))\n}\n\nHookedWalletSubprovider.prototype.approveTransaction = function(txParams, cb) {\n  cb(null, true)\n}\nHookedWalletSubprovider.prototype.approveMessage = function(txParams, cb) {\n  cb(null, true)\n}\n\nHookedWalletSubprovider.prototype.publishTransaction = function(rawTx, cb) {\n  const self = this\n  self.emitPayload({\n    method: 'eth_sendRawTransaction',\n    params: [rawTx],\n  }, function(err, res){\n    if (err) return cb(err)\n    cb(null, res.result)\n  })\n}\n\nHookedWalletSubprovider.prototype.validateTransaction = function(txParams, cb){\n  const self = this\n  // shortcut: undefined sender is invalid\n  if (txParams.from === undefined) return cb(new Error(`Undefined address - from address required to sign transaction.`))\n  self.validateSender(txParams.from, function(err, senderIsValid){\n    if (err) return cb(err)\n    if (!senderIsValid) return cb(new Error(`Unknown address - unable to sign transaction for this address: \"${txParams.from}\"`))\n    cb()\n  })\n}\n\nHookedWalletSubprovider.prototype.validateMessage = function(msgParams, cb){\n  const self = this\n  if (msgParams.from === undefined) return cb(new Error(`Undefined address - from address required to sign message.`))\n  self.validateSender(msgParams.from, function(err, senderIsValid){\n    if (err) return cb(err)\n    if (!senderIsValid) return cb(new Error(`Unknown address - unable to sign message for this address: \"${msgParams.from}\"`))\n    cb()\n  })\n}\n\nHookedWalletSubprovider.prototype.validateSender = function(senderAddress, cb){\n  const self = this\n  // shortcut: undefined sender is invalid\n  if (senderAddress === undefined) return cb(null, false)\n  self.getAccounts(function(err, accounts){\n    if (err) return cb(err)\n    var senderIsValid = (accounts.map(toLowerCase).indexOf(senderAddress.toLowerCase()) !== -1)\n    cb(null, senderIsValid)\n  })\n}\n\nHookedWalletSubprovider.prototype.fillInTxExtras = function(txParams, cb){\n  const self = this\n  var address = txParams.from\n  // console.log('fillInTxExtras - address:', address)\n\n  var reqs = {}\n\n  if (txParams.gasPrice === undefined) {\n    // console.log(\"need to get gasprice\")\n    reqs.gasPrice = self.emitPayload.bind(self, { method: 'eth_gasPrice', params: [] })\n  }\n\n  if (txParams.nonce === undefined) {\n    // console.log(\"need to get nonce\")\n    reqs.nonce = self.emitPayload.bind(self, { method: 'eth_getTransactionCount', params: [address, 'pending'] })\n  }\n\n  if (txParams.gas === undefined) {\n    // console.log(\"need to get gas\")\n    reqs.gas = estimateGas.bind(null, self.engine, cloneTxParams(txParams))\n  }\n\n  async.parallel(reqs, function(err, result) {\n    if (err) return cb(err)\n    // console.log('fillInTxExtras - result:', result)\n\n    var res = {}\n    if (result.gasPrice) res.gasPrice = result.gasPrice.result\n    if (result.nonce) res.nonce = result.nonce.result\n    if (result.gas) res.gas = result.gas\n\n    cb(null, extend(res, txParams))\n  })\n}\n\n// util\n\n// we use this to clean any custom params from the txParams\nfunction cloneTxParams(txParams){\n  return {\n    from: txParams.from,\n    to: txParams.to,\n    value: txParams.value,\n    data: txParams.data,\n    gas: txParams.gas,\n    gasPrice: txParams.gasPrice,\n    nonce: txParams.nonce,\n  }\n}\n\nfunction toLowerCase(string){\n  return string.toLowerCase()\n}"]},"metadata":{},"sourceType":"script"}